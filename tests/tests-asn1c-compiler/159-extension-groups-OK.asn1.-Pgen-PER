
/*** <<< INCLUDES [ID] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [ID] >>> ***/

typedef long	 ID_t;

/*** <<< FUNC-DECLS [ID] >>> ***/

extern asn_per_constraints_t asn_PER_type_ID_constr_1;
extern asn_TYPE_descriptor_t asn_DEF_ID;
asn_struct_free_f ID_free;
asn_struct_print_f ID_print;
asn_constr_check_f ID_constraint;
ber_type_decoder_f ID_decode_ber;
der_type_encoder_f ID_encode_der;
xer_type_decoder_f ID_decode_xer;
xer_type_encoder_f ID_encode_xer;
per_type_decoder_f ID_decode_uper;
per_type_encoder_f ID_encode_uper;

/*** <<< CODE [ID] >>> ***/

int
ID_constraint(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 1023)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */

/*** <<< CTDEFS [ID] >>> ***/

asn_per_constraints_t asn_PER_type_ID_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 10,  10,  0,  1023 }	/* (0..1023) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [ID] >>> ***/

static const ber_tlv_tag_t asn_DEF_ID_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_ID = {
	"ID",
	"ID",
	&asn_OP_NativeInteger,
	asn_DEF_ID_tags_1,
	sizeof(asn_DEF_ID_tags_1)
		/sizeof(asn_DEF_ID_tags_1[0]), /* 1 */
	asn_DEF_ID_tags_1,	/* Same as above */
	sizeof(asn_DEF_ID_tags_1)
		/sizeof(asn_DEF_ID_tags_1[0]), /* 1 */
	{ 0, &asn_PER_type_ID_constr_1, ID_constraint },
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [ID-V1] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [ID-V1] >>> ***/

typedef long	 ID_V1_t;

/*** <<< FUNC-DECLS [ID-V1] >>> ***/

extern asn_per_constraints_t asn_PER_type_ID_V1_constr_1;
extern asn_TYPE_descriptor_t asn_DEF_ID_V1;
asn_struct_free_f ID_V1_free;
asn_struct_print_f ID_V1_print;
asn_constr_check_f ID_V1_constraint;
ber_type_decoder_f ID_V1_decode_ber;
der_type_encoder_f ID_V1_encode_der;
xer_type_decoder_f ID_V1_decode_xer;
xer_type_encoder_f ID_V1_encode_xer;
per_type_decoder_f ID_V1_decode_uper;
per_type_encoder_f ID_V1_encode_uper;

/*** <<< CODE [ID-V1] >>> ***/

int
ID_V1_constraint(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 1024 && value <= 2047)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */

/*** <<< CTDEFS [ID-V1] >>> ***/

asn_per_constraints_t asn_PER_type_ID_V1_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 10,  10,  1024,  2047 }	/* (1024..2047) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [ID-V1] >>> ***/

static const ber_tlv_tag_t asn_DEF_ID_V1_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_ID_V1 = {
	"ID-V1",
	"ID-V1",
	&asn_OP_NativeInteger,
	asn_DEF_ID_V1_tags_1,
	sizeof(asn_DEF_ID_V1_tags_1)
		/sizeof(asn_DEF_ID_V1_tags_1[0]), /* 1 */
	asn_DEF_ID_V1_tags_1,	/* Same as above */
	sizeof(asn_DEF_ID_V1_tags_1)
		/sizeof(asn_DEF_ID_V1_tags_1[0]), /* 1 */
	{ 0, &asn_PER_type_ID_V1_constr_1, ID_V1_constraint },
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [ID-V2] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [ID-V2] >>> ***/

typedef long	 ID_V2_t;

/*** <<< FUNC-DECLS [ID-V2] >>> ***/

extern asn_per_constraints_t asn_PER_type_ID_V2_constr_1;
extern asn_TYPE_descriptor_t asn_DEF_ID_V2;
asn_struct_free_f ID_V2_free;
asn_struct_print_f ID_V2_print;
asn_constr_check_f ID_V2_constraint;
ber_type_decoder_f ID_V2_decode_ber;
der_type_encoder_f ID_V2_encode_der;
xer_type_decoder_f ID_V2_decode_xer;
xer_type_encoder_f ID_V2_encode_xer;
per_type_decoder_f ID_V2_decode_uper;
per_type_encoder_f ID_V2_encode_uper;

/*** <<< CODE [ID-V2] >>> ***/

int
ID_V2_constraint(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 4095)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */

/*** <<< CTDEFS [ID-V2] >>> ***/

asn_per_constraints_t asn_PER_type_ID_V2_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 12,  12,  0,  4095 }	/* (0..4095) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [ID-V2] >>> ***/

static const ber_tlv_tag_t asn_DEF_ID_V2_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_ID_V2 = {
	"ID-V2",
	"ID-V2",
	&asn_OP_NativeInteger,
	asn_DEF_ID_V2_tags_1,
	sizeof(asn_DEF_ID_V2_tags_1)
		/sizeof(asn_DEF_ID_V2_tags_1[0]), /* 1 */
	asn_DEF_ID_V2_tags_1,	/* Same as above */
	sizeof(asn_DEF_ID_V2_tags_1)
		/sizeof(asn_DEF_ID_V2_tags_1[0]), /* 1 */
	{ 0, &asn_PER_type_ID_V2_constr_1, ID_V2_constraint },
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [ID-V3] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [ID-V3] >>> ***/

typedef long	 ID_V3_t;

/*** <<< FUNC-DECLS [ID-V3] >>> ***/

extern asn_per_constraints_t asn_PER_type_ID_V3_constr_1;
extern asn_TYPE_descriptor_t asn_DEF_ID_V3;
asn_struct_free_f ID_V3_free;
asn_struct_print_f ID_V3_print;
asn_constr_check_f ID_V3_constraint;
ber_type_decoder_f ID_V3_decode_ber;
der_type_encoder_f ID_V3_encode_der;
xer_type_decoder_f ID_V3_decode_xer;
xer_type_encoder_f ID_V3_encode_xer;
per_type_decoder_f ID_V3_decode_uper;
per_type_encoder_f ID_V3_encode_uper;

/*** <<< CODE [ID-V3] >>> ***/

int
ID_V3_constraint(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 8192)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */

/*** <<< CTDEFS [ID-V3] >>> ***/

asn_per_constraints_t asn_PER_type_ID_V3_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 14,  14,  0,  8192 }	/* (0..8192) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [ID-V3] >>> ***/

static const ber_tlv_tag_t asn_DEF_ID_V3_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_ID_V3 = {
	"ID-V3",
	"ID-V3",
	&asn_OP_NativeInteger,
	asn_DEF_ID_V3_tags_1,
	sizeof(asn_DEF_ID_V3_tags_1)
		/sizeof(asn_DEF_ID_V3_tags_1[0]), /* 1 */
	asn_DEF_ID_V3_tags_1,	/* Same as above */
	sizeof(asn_DEF_ID_V3_tags_1)
		/sizeof(asn_DEF_ID_V3_tags_1[0]), /* 1 */
	{ 0, &asn_PER_type_ID_V3_constr_1, ID_V3_constraint },
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [ID-V4] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [ID-V4] >>> ***/

typedef long	 ID_V4_t;

/*** <<< FUNC-DECLS [ID-V4] >>> ***/

extern asn_per_constraints_t asn_PER_type_ID_V4_constr_1;
extern asn_TYPE_descriptor_t asn_DEF_ID_V4;
asn_struct_free_f ID_V4_free;
asn_struct_print_f ID_V4_print;
asn_constr_check_f ID_V4_constraint;
ber_type_decoder_f ID_V4_decode_ber;
der_type_encoder_f ID_V4_encode_der;
xer_type_decoder_f ID_V4_decode_xer;
xer_type_encoder_f ID_V4_encode_xer;
per_type_decoder_f ID_V4_decode_uper;
per_type_encoder_f ID_V4_encode_uper;

/*** <<< CODE [ID-V4] >>> ***/

int
ID_V4_constraint(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 16383)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */

/*** <<< CTDEFS [ID-V4] >>> ***/

asn_per_constraints_t asn_PER_type_ID_V4_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 14,  14,  0,  16383 }	/* (0..16383) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [ID-V4] >>> ***/

static const ber_tlv_tag_t asn_DEF_ID_V4_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_ID_V4 = {
	"ID-V4",
	"ID-V4",
	&asn_OP_NativeInteger,
	asn_DEF_ID_V4_tags_1,
	sizeof(asn_DEF_ID_V4_tags_1)
		/sizeof(asn_DEF_ID_V4_tags_1[0]), /* 1 */
	asn_DEF_ID_V4_tags_1,	/* Same as above */
	sizeof(asn_DEF_ID_V4_tags_1)
		/sizeof(asn_DEF_ID_V4_tags_1[0]), /* 1 */
	{ 0, &asn_PER_type_ID_V4_constr_1, ID_V4_constraint },
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [MessageWithExtensionGrp] >>> ***/

#include "ID.h"
#include <OCTET_STRING.h>
#include "ID-V1.h"
#include <constr_SEQUENCE.h>
#include "ID-V2.h"
#include "ID-V3.h"
#include <NativeInteger.h>
#include "ID-V4.h"
#include <BIT_STRING.h>

/*** <<< TYPE-DECLS [MessageWithExtensionGrp] >>> ***/

typedef struct MessageWithExtensionGrp {
	ID_t	 id;
	OCTET_STRING_t	 data;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	struct ext1 {
		ID_V1_t	*id_v1	/* OPTIONAL */;
		OCTET_STRING_t	*data_v1	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext1;
	struct ext2 {
		ID_V2_t	*id_v2	/* OPTIONAL */;
		OCTET_STRING_t	*data_v2	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext2;
	struct ext3 {
		ID_V3_t	 id_v3;
		long	*data_v3	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext3;
	struct ext4 {
		ID_V4_t	*id_v4	/* OPTIONAL */;
		BIT_STRING_t	*data_v4	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext4;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MessageWithExtensionGrp_t;

/*** <<< FUNC-DECLS [MessageWithExtensionGrp] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_MessageWithExtensionGrp;

/*** <<< CODE [MessageWithExtensionGrp] >>> ***/

static int
memb_data_v1_constraint_5(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const OCTET_STRING_t *st = (const OCTET_STRING_t *)sptr;
	size_t size;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	size = st->size;
	
	if((size == 64)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_data_v2_constraint_8(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const OCTET_STRING_t *st = (const OCTET_STRING_t *)sptr;
	size_t size;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	size = st->size;
	
	if((size <= 256)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_data_v3_constraint_11(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 2048)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_data_v4_constraint_14(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const BIT_STRING_t *st = (const BIT_STRING_t *)sptr;
	size_t size;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	if(st->size > 0) {
		/* Size in bits */
		size = 8 * st->size - (st->bits_unused & 0x07);
	} else {
		size = 0;
	}
	
	if((size <= 128)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}


/*** <<< CTDEFS [MessageWithExtensionGrp] >>> ***/

static asn_per_constraints_t asn_PER_memb_data_v1_constr_7 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_CONSTRAINED,	 0,  0,  64,  64 }	/* (SIZE(64..64)) */,
	0, 0	/* No PER value map */
};
static asn_per_constraints_t asn_PER_memb_data_v2_constr_10 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_CONSTRAINED,	 9,  9,  0,  256 }	/* (SIZE(0..256)) */,
	0, 0	/* No PER value map */
};
static asn_per_constraints_t asn_PER_memb_data_v3_constr_13 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 12,  12,  0,  2048 }	/* (0..2048) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
static asn_per_constraints_t asn_PER_memb_data_v4_constr_16 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_CONSTRAINED,	 8,  8,  0,  128 }	/* (SIZE(0..128)) */,
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [MessageWithExtensionGrp] >>> ***/

static asn_TYPE_member_t asn_MBR_ext1_5[] = {
	{ ATF_POINTER, 2, offsetof(struct ext1, id_v1),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_ID_V1,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "id-v1"
		},
	{ ATF_POINTER, 1, offsetof(struct ext1, data_v1),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = &asn_PER_memb_data_v1_constr_7, .general_constraints =  memb_data_v1_constraint_5 },
		0, 0, /* No default value */
		.name = "data-v1"
		},
};
static const int asn_MAP_ext1_oms_5[] = { 0, 1 };
static const ber_tlv_tag_t asn_DEF_ext1_tags_5[] = {
	(ASN_TAG_CLASS_CONTEXT | (2 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_ext1_tag2el_5[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* id-v1 */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 } /* data-v1 */
};
static asn_SEQUENCE_specifics_t asn_SPC_ext1_specs_5 = {
	sizeof(struct ext1),
	offsetof(struct ext1, _asn_ctx),
	.tag2el = asn_MAP_ext1_tag2el_5,
	.tag2el_count = 2,	/* Count of tags in the map */
	asn_MAP_ext1_oms_5,	/* Optional members */
	2, 0,	/* Root/Additions */
	-1,	/* First extension addition */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_ext1_5 = {
	"ext1",
	"ext1",
	&asn_OP_SEQUENCE,
	asn_DEF_ext1_tags_5,
	sizeof(asn_DEF_ext1_tags_5)
		/sizeof(asn_DEF_ext1_tags_5[0]) - 1, /* 1 */
	asn_DEF_ext1_tags_5,	/* Same as above */
	sizeof(asn_DEF_ext1_tags_5)
		/sizeof(asn_DEF_ext1_tags_5[0]), /* 2 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_ext1_5,
	2,	/* Elements count */
	&asn_SPC_ext1_specs_5	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_ext2_8[] = {
	{ ATF_POINTER, 2, offsetof(struct ext2, id_v2),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_ID_V2,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "id-v2"
		},
	{ ATF_POINTER, 1, offsetof(struct ext2, data_v2),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = &asn_PER_memb_data_v2_constr_10, .general_constraints =  memb_data_v2_constraint_8 },
		0, 0, /* No default value */
		.name = "data-v2"
		},
};
static const int asn_MAP_ext2_oms_8[] = { 0, 1 };
static const ber_tlv_tag_t asn_DEF_ext2_tags_8[] = {
	(ASN_TAG_CLASS_CONTEXT | (3 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_ext2_tag2el_8[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* id-v2 */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 } /* data-v2 */
};
static asn_SEQUENCE_specifics_t asn_SPC_ext2_specs_8 = {
	sizeof(struct ext2),
	offsetof(struct ext2, _asn_ctx),
	.tag2el = asn_MAP_ext2_tag2el_8,
	.tag2el_count = 2,	/* Count of tags in the map */
	asn_MAP_ext2_oms_8,	/* Optional members */
	2, 0,	/* Root/Additions */
	-1,	/* First extension addition */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_ext2_8 = {
	"ext2",
	"ext2",
	&asn_OP_SEQUENCE,
	asn_DEF_ext2_tags_8,
	sizeof(asn_DEF_ext2_tags_8)
		/sizeof(asn_DEF_ext2_tags_8[0]) - 1, /* 1 */
	asn_DEF_ext2_tags_8,	/* Same as above */
	sizeof(asn_DEF_ext2_tags_8)
		/sizeof(asn_DEF_ext2_tags_8[0]), /* 2 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_ext2_8,
	2,	/* Elements count */
	&asn_SPC_ext2_specs_8	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_ext3_11[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct ext3, id_v3),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_ID_V3,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "id-v3"
		},
	{ ATF_POINTER, 1, offsetof(struct ext3, data_v3),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = &asn_PER_memb_data_v3_constr_13, .general_constraints =  memb_data_v3_constraint_11 },
		0, 0, /* No default value */
		.name = "data-v3"
		},
};
static const int asn_MAP_ext3_oms_11[] = { 1 };
static const ber_tlv_tag_t asn_DEF_ext3_tags_11[] = {
	(ASN_TAG_CLASS_CONTEXT | (4 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_ext3_tag2el_11[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* id-v3 */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 } /* data-v3 */
};
static asn_SEQUENCE_specifics_t asn_SPC_ext3_specs_11 = {
	sizeof(struct ext3),
	offsetof(struct ext3, _asn_ctx),
	.tag2el = asn_MAP_ext3_tag2el_11,
	.tag2el_count = 2,	/* Count of tags in the map */
	asn_MAP_ext3_oms_11,	/* Optional members */
	1, 0,	/* Root/Additions */
	-1,	/* First extension addition */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_ext3_11 = {
	"ext3",
	"ext3",
	&asn_OP_SEQUENCE,
	asn_DEF_ext3_tags_11,
	sizeof(asn_DEF_ext3_tags_11)
		/sizeof(asn_DEF_ext3_tags_11[0]) - 1, /* 1 */
	asn_DEF_ext3_tags_11,	/* Same as above */
	sizeof(asn_DEF_ext3_tags_11)
		/sizeof(asn_DEF_ext3_tags_11[0]), /* 2 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_ext3_11,
	2,	/* Elements count */
	&asn_SPC_ext3_specs_11	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_ext4_14[] = {
	{ ATF_POINTER, 2, offsetof(struct ext4, id_v4),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_ID_V4,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "id-v4"
		},
	{ ATF_POINTER, 1, offsetof(struct ext4, data_v4),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_BIT_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = &asn_PER_memb_data_v4_constr_16, .general_constraints =  memb_data_v4_constraint_14 },
		0, 0, /* No default value */
		.name = "data-v4"
		},
};
static const int asn_MAP_ext4_oms_14[] = { 0, 1 };
static const ber_tlv_tag_t asn_DEF_ext4_tags_14[] = {
	(ASN_TAG_CLASS_CONTEXT | (5 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_ext4_tag2el_14[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* id-v4 */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 } /* data-v4 */
};
static asn_SEQUENCE_specifics_t asn_SPC_ext4_specs_14 = {
	sizeof(struct ext4),
	offsetof(struct ext4, _asn_ctx),
	.tag2el = asn_MAP_ext4_tag2el_14,
	.tag2el_count = 2,	/* Count of tags in the map */
	asn_MAP_ext4_oms_14,	/* Optional members */
	2, 0,	/* Root/Additions */
	-1,	/* First extension addition */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_ext4_14 = {
	"ext4",
	"ext4",
	&asn_OP_SEQUENCE,
	asn_DEF_ext4_tags_14,
	sizeof(asn_DEF_ext4_tags_14)
		/sizeof(asn_DEF_ext4_tags_14[0]) - 1, /* 1 */
	asn_DEF_ext4_tags_14,	/* Same as above */
	sizeof(asn_DEF_ext4_tags_14)
		/sizeof(asn_DEF_ext4_tags_14[0]), /* 2 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_ext4_14,
	2,	/* Elements count */
	&asn_SPC_ext4_specs_14	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_MessageWithExtensionGrp_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct MessageWithExtensionGrp, id),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_ID,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "id"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct MessageWithExtensionGrp, data),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "data"
		},
	{ ATF_POINTER, 4, offsetof(struct MessageWithExtensionGrp, ext1),
		.tag = (ASN_TAG_CLASS_CONTEXT | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ext1_5,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "ext1"
		},
	{ ATF_POINTER, 3, offsetof(struct MessageWithExtensionGrp, ext2),
		.tag = (ASN_TAG_CLASS_CONTEXT | (3 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ext2_8,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "ext2"
		},
	{ ATF_POINTER, 2, offsetof(struct MessageWithExtensionGrp, ext3),
		.tag = (ASN_TAG_CLASS_CONTEXT | (4 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ext3_11,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "ext3"
		},
	{ ATF_POINTER, 1, offsetof(struct MessageWithExtensionGrp, ext4),
		.tag = (ASN_TAG_CLASS_CONTEXT | (5 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ext4_14,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "ext4"
		},
};
static const int asn_MAP_MessageWithExtensionGrp_oms_1[] = { 2, 3, 4, 5 };
static const ber_tlv_tag_t asn_DEF_MessageWithExtensionGrp_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_MessageWithExtensionGrp_tag2el_1[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* id */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 }, /* data */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 2, 0, 0 }, /* ext1 */
    { (ASN_TAG_CLASS_CONTEXT | (3 << 2)), 3, 0, 0 }, /* ext2 */
    { (ASN_TAG_CLASS_CONTEXT | (4 << 2)), 4, 0, 0 }, /* ext3 */
    { (ASN_TAG_CLASS_CONTEXT | (5 << 2)), 5, 0, 0 } /* ext4 */
};
static asn_SEQUENCE_specifics_t asn_SPC_MessageWithExtensionGrp_specs_1 = {
	sizeof(struct MessageWithExtensionGrp),
	offsetof(struct MessageWithExtensionGrp, _asn_ctx),
	.tag2el = asn_MAP_MessageWithExtensionGrp_tag2el_1,
	.tag2el_count = 6,	/* Count of tags in the map */
	asn_MAP_MessageWithExtensionGrp_oms_1,	/* Optional members */
	0, 4,	/* Root/Additions */
	2,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_MessageWithExtensionGrp = {
	"MessageWithExtensionGrp",
	"MessageWithExtensionGrp",
	&asn_OP_SEQUENCE,
	asn_DEF_MessageWithExtensionGrp_tags_1,
	sizeof(asn_DEF_MessageWithExtensionGrp_tags_1)
		/sizeof(asn_DEF_MessageWithExtensionGrp_tags_1[0]), /* 1 */
	asn_DEF_MessageWithExtensionGrp_tags_1,	/* Same as above */
	sizeof(asn_DEF_MessageWithExtensionGrp_tags_1)
		/sizeof(asn_DEF_MessageWithExtensionGrp_tags_1[0]), /* 1 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_MessageWithExtensionGrp_1,
	6,	/* Elements count */
	&asn_SPC_MessageWithExtensionGrp_specs_1	/* Additional specs */
};

